如果想提交自己的代码 修改后的代码统一放到RestoreScripts 尽可能按照我自己提交的格式来

没啥用的代码不建议优先处理 我目前是按照GameManager的更新部分大致还原中 主要目的是先还原加载世界到能操作玩家这部分
如果不知道哪些有用建议直接帮忙看看RestoreScripts带Character或VCHuman的相关所有脚本

虚函数 接口 相关的虚表查找代码是无法还原名称的 只能靠经验人工还原--------------------------------------------------------------------------------------------

遇到这种代码直接看"接口名"接口方法定义 Slot看il2cppDumper的函数后面Slot就知道了 只有虚函数才有Slot
v10 = sub_183CF4E40("Slot", "接口名"_TypeInfo, "可选参数");

协程函数---------------------------------------------------------------------------------------------------------------------------------------------

返回值是IEnumerator的函数指向的函数都是错的 他在底层会生成一个Class 真正的函数在这个Class的MoveNext里面 需要在dump.cs里面找到同名的文件看MoveNext的地址
这个假类的构造必定有这两个
_PC 当前pattern 执行顺序 
_current 下次延迟

比如
a = 1;
yield return null;
a = 2;
yield return (另一个协程函数);
a = 3;
yield return new WaitForSeconds(5);

伪代码看起来大概意思是这样
if (_PC == 0)
{
	a = 1;
	_PC = 1;
	_current = 0;
}
else if (_PC == 1)
{
	a = 2;
	_PC = 2;
	_current = (另一个协程函数);
}
else if (_PC == 2)
{
	a = 3;
	_PC = -1; //退出
	_current = new WaitForSeconds(5);
}

强制类型转换------------------------------------------------------------------------------------------------------------------------------------------
看到 typeHierarchyDepth 无脑as对象就完事了

函数相关--------------------------------------------------------------------------------------------------------------------------------------------
有时会看到Lazy啥的(延迟初始化) 写起来大概是这样 照着这个格式翻译就好了
MoleMole.Lazy<InputEventTypeComparer>.Get<InputEventTypeComparer>();

有时候会直接看到 Class名_TypeInfo啥的 然后GetTypeFromHandle 翻译C#大概是这样的格式
Type.GetTypeFromHandle(typeof(名字).TypeHandle);

有时候会遇到类似ThreadStatic这种线程独立副本的字段 他们的偏移是-1 这种不好说明怎么翻译 如果没逆过也看不出来有在调用这玩意 所以如果遇到直接忽视这个函数我来吧
(如果对自己有自信的话看看 GameManager.Update()第一句和GameManager.LateUpdate()最后一句自己研究吧) 